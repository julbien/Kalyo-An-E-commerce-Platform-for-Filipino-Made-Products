CREATE DATABASE kalyo;

-- User Table
CREATE TABLE Users (
    UserID INT PRIMARY KEY,
    Username VARCHAR(50) UNIQUE NOT NULL,
    Password VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    FullName VARCHAR(100) NOT NULL,
    Photo BLOB
);

-- Seller table
CREATE TABLE Sellers (
    SellerID INT PRIMARY KEY,
    Username VARCHAR(50) UNIQUE NOT NULL,
    Password VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    FullName VARCHAR(100) NOT NULL,
    SellerInfo TEXT NOT NULL,
    Photo BLOB
);

-- Product table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Ratings DECIMAL(3, 2) DEFAULT 0.0,
    CategoryID INT,
    SellerID INT,
    Photo BLOB,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
    FOREIGN KEY (SellerID) REFERENCES Sellers(SellerID)
);


-- Category table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50) NOT NULL
);



-- Rating table
CREATE TABLE Ratings (
    RatingID INT PRIMARY KEY,
    ProductID INT,
    UserID INT,
    Rate INT,
    Comment VARCHAR(255),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Order table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    UserID INT,
    Address VARCHAR(255),
    ShippingOption VARCHAR(50),
    PaymentMethod VARCHAR(50),
    AdditionalOffer VARCHAR(255),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Cart table
CREATE TABLE Cart (
    CartID INT PRIMARY KEY,
    UserID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Transaction table
CREATE TABLE Transactions (
    TransactionID INT PRIMARY KEY,
    UserID INT,
    OrderID INT,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Follower table
CREATE TABLE Followers (
    FollowerID INT PRIMARY KEY,
    UserID INT,
    SellerID INT,
    FollowerUserID INT,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (SellerID) REFERENCES Seller(SellerID),
    FOREIGN KEY (FollowerUserID) REFERENCES Users(UserID)
)

--for ordering
INSERT INTO Orders (UserID, Address, ShippingOption, PaymentMethod, AdditionalOffer)
VALUES (?, ?, ?, ?, ?);

--for cart
INSERT INTO Cart (UserID, ProductID, Quantity)
VALUES (?,?,?);

--adding rate
INSERT INTO Ratings (ProductID, UserID, Rate, Comment)
VALUES (?,?,?,?);

--for following
INSERT INTO Followers (UserID, FollowerUserID)
VALUES (?, ?);

--for seller's follower
INSERT INTO Followers (UserID, FollowerUserID)
VALUES (?, ?);

-- Inserting 10 rows of test data

-- Ratings table
INSERT INTO Ratings (ProductID, UserID, Rate, Comment)
VALUES
    (1, 1, 4, 'Great product!'),
    (2, 2, 3, 'Nice craftsmanship'),
    (3, 3, 5, 'Delicious!'),
    (4, 4, 4, 'Beautiful sound'),
    (5, 5, 4, 'Amazing art piece'),
    (1, 6, 5, 'Perfect fit'),
    (2, 7, 3, 'Unique design'),
    (3, 8, 4, 'Authentic flavor'),
    (4, 9, 5, 'Love the traditional touch'),
    (5, 10, 4, 'Impressive details');

-- Orders table
INSERT INTO Orders (UserID, Address, ShippingOption, PaymentMethod, AdditionalOffer)
VALUES
    (1, 'Manila', 'Express Shipping', 'Credit Card', 'Gift wrapping'),
    (2, 'Cebu', 'Standard Shipping', 'PayPal', 'Free shipping promo'),
    (3, 'Davao', 'Standard Shipping', 'Cash on Delivery', NULL),
    (4, 'Quezon City', 'Express Shipping', 'Credit Card', 'Discount code: SALE10'),
    (5, 'Makati', 'Express Shipping', 'PayPal', NULL),
    (6, 'Pasig', 'Standard Shipping', 'Cash on Delivery', 'Free gift included'),
    (7, 'Taguig', 'Express Shipping', 'Credit Card', 'Birthday special'),
    (8, 'Iloilo', 'Standard Shipping', 'PayPal', NULL),
    (9, 'Zamboanga', 'Express Shipping', 'Cash on Delivery', 'Limited-time offer'),
    (10, 'Antipolo', 'Standard Shipping', 'Credit Card', 'Early bird discount');

-- Cart table
INSERT INTO Cart (UserID, ProductID, Quantity)
VALUES
    (1, 1, 2),
    (2, 2, 1),
    (3, 3, 3),
    (4, 4, 2),
    (5, 5, 1),
    (6, 1, 2),
    (7, 2, 1),
    (8, 3, 3),
    (9, 4, 2),
    (10, 5, 1);

-- Transactions table
INSERT INTO Transactions (UserID, OrderID)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8,
    (9, 9),
    (10, 10);

-- Followers table
INSERT INTO Followers (UserID, SellerID, FollowerUserID)
VALUES
    (1, 1, 2),
    (2, 2, 3),
    (3, 3, 4),
    (4, 4, 5),
    (5, 5, 6),
    (6, 1, 7),
    (7, 2, 8,
    (8, 3, 9),
    (9, 4, 10),
    (10, 5, 1);

--Query for finding a specific product
SELECT
    Products.ProductID,
    Products.Name AS ProductName,
    Products.Ratings,
    Categories.CategoryName,
    Sellers.FullName AS SellerName
FROM
    Products
    JOIN Categories ON Products.CategoryID = Categories.CategoryID
    JOIN Sellers ON Products.SellerID = Sellers.SellerID
WHERE
    Products.Name = '?;

--Query for log in 
-- For regular users
SELECT * FROM Users
WHERE Username = '?' AND Password = '?';

-- For sellers
SELECT * FROM Sellers
WHERE Username = '?' AND Password = '?';

--Query for viewing a product in category (if specific)
SELECT
    Products.ProductID,
    Products.Name AS ProductName,
    Products.Ratings,
    Products.CategoryID,
    Categories.CategoryName
FROM
    Products
JOIN
    Categories ON Products.CategoryID = Categories.CategoryID
WHERE
    Categories.CategoryName = '?';

--Query for viewing a product in category (if all)
SELECT
    Products.ProductID,
    Products.Name AS ProductName,
    Products.Ratings,
    Categories.CategoryID,
    Categories.CategoryName
FROM
    Products
JOIN
    Categories ON Products.CategoryID = Categories.CategoryID;

--Query for getting the total payment for a specific order
SELECT 
    O.OrderID,
    O.UserID,
    O.Address,
    O.ShippingOption,
    O.PaymentMethod,
    SUM(P.Price * C.Quantity) AS TotalPayment
FROM 
    Orders O
JOIN 
    Cart C ON O.OrderID = C.OrderID
JOIN 
    Products P ON C.ProductID = P.ProductID
WHERE 
    O.OrderID = ?
GROUP BY 
    O.OrderID, O.UserID, O.Address, O.ShippingOption, O.PaymentMethod;

--Count total followers across all sellers
SELECT UserID, COUNT(FollowerID) AS FollowerCount
FROM Followers
GROUP BY UserID;

-- Count followers for each seller 
SELECT UserID, COUNT(FollowerID) AS FollowerCount
FROM Followers
WHERE UserID = ?
GROUP BY UserID;

--for seller page to show info and products
SELECT
    S.SellerID,
    S.Username AS SellerUsername,
    S.FullName AS SellerFullName,
    S.SellerInfo,
    F.FollowerID,
    U.Username AS FollowerUsername,
    P.ProductID,
    P.Name AS ProductName,
    P.Ratings
FROM
    Sellers S
LEFT JOIN
    Followers F ON S.SellerID = F.UserID
LEFT JOIN
    Users U ON F.FollowerUserID = U.UserID
LEFT JOIN
    Products P ON S.SellerID = P.SellerID
WHERE
    S.SellerID = ?;


